import "domain.proto";
package gserver;

option optimize_for = SPEED;
option java_package = "com.katesoft.gserver.commands";
option java_outer_classname = "Commands";
//
// attributes for each commands in protocol(transport level).
//
message MessageHeaders {
	required string correlationID = 1;
	required sint64 sequenceNumber = 2;
	required sint64 messageTimestamp = 3;
}
//
// Base command defines:
// 1) qualifier - fully/shortly qualified name of the command (i.e. 'login' or 'your.namespace.logincommand').
// 2) headers - transport level attributes.
// 3) sessionId - if the user started game play, the game play will be always bound to session context.
//
message BaseCommand {
	extensions 100 to max;
	required string qualifier = 1;
	required MessageHeaders headers = 2;
	optional string sessionId = 3;
}
//
// Exception defines:
// 1) headers - transport level attributes.
// 2) uuid - unique identifier of exception (user can use this in order to submit bug with attached UUID. administrator can grep logs then).
// 3) qualifier - fully/shortly qualified name of server exception (i.e. 'InsufficientBanalanceException' or 'java.lang.NullPointerException').
// 4) msg - exception message.
// 5) stacktrace(optional) - for debug purpose, attach server log details.
// 6) game(optional) - specify which game could not recognize client command.
//
message Exception {
	required MessageHeaders headers = 1;
	required string uuid = 2;
	required string qualifier = 3;
	required string msg = 4;
	optional string stacktrace = 5;
	optional string game = 6;
}

//
// login into game play with some token (for web applications it's may be cookie), but it's rather abstract.
// client needs to specify the target platform and optionally preferred game display language.
// server responds with LoginCommandReply message (generates session id).
// if the login command fails for any reason, server closes connection (and sends description to client before), so there is no special reply.
//
message LoginCommand {
	extend BaseCommand {
		required LoginCommand cmd = 100;
	}
	required gserver.ProtocolVersion protocolVersion = 1;
	required string token = 2;
	required string clientPlatform = 3;
	optional string lang = 4;
}
//
// user can continue game play even after temporary server disconnection.
//
message ReloginCommand {
	extend BaseCommand {
		required ReloginCommand cmd = 101;
	}
	required string token = 1;
}
//
// gracefully close game play (without broken games creation, etc).
// this command expected by server at the end of game play.
// no response required to client.
//
message CloseGamePlayAndLogoutCommand {
	extend BaseCommand {
		required CloseGamePlayAndLogoutCommand cmd = 102;
	}
	required bool forceCloseConnection = 1 [default = true];
}
//
// reply to close play if the user doesn't force to close connection.
//
message CloseGamePlayAndLogoutReply {
	extend BaseCommand {
		required CloseGamePlayAndLogoutReply cmd = 103;
	}
}
//
// update common game play settings:
// 1) display user name
// 2) preferred display language
// 3) preferred pay-out currency
// 4) disable music (game music and background sounds)
//
message UpdatePlayerSettingsCommand {
	extend BaseCommand {
		required UpdatePlayerSettingsCommand cmd = 104;
	}
	required PlayerSettings settings = 1;
}
//
// get i18n messages by keys for specific locale.
//
message Geti18nMessagesCommand {
	extend BaseCommand {
		required Geti18nMessagesCommand cmd = 105;
	}
	required string locale = 1;
	repeated string keys = 2;
}
//
// reply to the geti18n properties command.
//
message Geti18nMessagesReply {
	extend BaseCommand {
		required Geti18nMessagesReply cmd = 106;
	}
	repeated gserver.i18n values = 1;
}
//
// open game play for specific game.
// the command itself is idempotent, you will be attached to existing player session instance if it's ongoing.
//
message OpenGamePlayCommand {
	extend BaseCommand {
		required OpenGamePlayCommand cmd = 110;
	}
	required string gameId = 1;
}
//
// reply to open game play command.
// contains bet limits for the game and coins layout and game display name.
// balance is immediately available in the reply message.
//
message OpenGamePlayReply {
	extend BaseCommand {
		required OpenGamePlayReply cmd = 111;
	}
	required string sessionId = 1;
	required double balance = 2;
	required BetLimits betLimits = 4;
	required Coins coins = 5;
	required bool reattached = 6 [default = false];
	required string displayName = 7;
}
//
//
//
message BalanceUpdateNotify {
	required double balance = 1;
}
//
//
//
message ShowMessageNotify {
	required string msg = 1;
	required gserver.NotificationType type = 2;
}
