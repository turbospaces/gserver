package com.katesoft.gserver.domain.support;

import java.util.List;

import org.springframework.data.redis.core.BoundHashOperations;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.security.crypto.encrypt.TextEncryptor;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionData;
import org.springframework.social.connect.ConnectionKey;
import org.springframework.social.connect.ConnectionRepository;
import org.springframework.util.MultiValueMap;

import com.google.common.base.Function;
import com.katesoft.gserver.domain.BO;
import com.katesoft.gserver.domain.RedisNamingConvention;

public class RedisSocialConnectionRepository implements ConnectionRepository {
    private final TextEncryptor textEncryptor;
    private final RedisNamingConvention connectionDateNamingConvention;
    private final String userId;

    public RedisSocialConnectionRepository(StringRedisTemplate template, TextEncryptor textEncryptor, String userId) {
        this.connectionDateNamingConvention = new RedisNamingConvention( template, ConnectionData.class );
        this.textEncryptor = textEncryptor;
        this.userId = userId;
    }
    @Override
    public void addConnection(Connection<?> connection) {
        final ConnectionData data = connection.createData();
        final BO bo = new BO() {
            @Override
            public void setAutoGeneratedId(long id) {}
            @Override
            public String getPrimaryKey() {
                return userId + ":" + data.getProviderId() + ":" + data.getProviderUserId();
            }
        };

        connectionDateNamingConvention.save( bo.getPrimaryKey(), new Function<BoundHashOperations<String, String, String>, BO>() {
            @Override
            public BO apply(BoundHashOperations<String, String, String> ops) {
                ops.put( "user_id", userId );
                ops.put( "provider_id", data.getProviderId() );
                ops.put( "provider_user_id", data.getProviderUserId() );
                ops.put( "display_name", data.getDisplayName() );
                ops.put( "profile_url", data.getProfileUrl() );
                ops.put( "image_url", data.getImageUrl() );
                ops.put( "access_token", textEncryptor.encrypt( data.getAccessToken() ) );
                ops.put( "secret", textEncryptor.encrypt( data.getSecret() ) );
                ops.put( "refresh_token", textEncryptor.encrypt( data.getRefreshToken() ) );
                ops.put( "expire_time", data.getExpireTime().toString() );
                return bo;
            }
        } );
    }

    @Override
    public void removeConnection(ConnectionKey connectionKey) {}

    @Override
    public MultiValueMap<String, Connection<?>> findAllConnections() {
        return null;
    }
    @Override
    public List<Connection<?>> findConnections(String providerId) {
        return null;
    }
    @Override
    public <A> List<Connection<A>> findConnections(Class<A> apiType) {
        return null;
    }
    @Override
    public MultiValueMap<String, Connection<?>> findConnectionsToUsers(MultiValueMap<String, String> providerUserIds) {
        return null;
    }
    @Override
    public Connection<?> getConnection(ConnectionKey connectionKey) {
        return null;
    }
    @Override
    public <A> Connection<A> getConnection(Class<A> apiType, String providerUserId) {
        return null;
    }
    @Override
    public <A> Connection<A> getPrimaryConnection(Class<A> apiType) {
        return null;
    }
    @Override
    public <A> Connection<A> findPrimaryConnection(Class<A> apiType) {
        return null;
    }
    @Override
    public void updateConnection(Connection<?> connection) {}
    @Override
    public void removeConnections(String providerId) {}
}
